{"version":3,"sources":["datatables.core.js"],"names":["DataTable","$table","userOptions","eventOptions","translations","_classCallCheck","this","version","table","elements","columnRowSelector","filterRowSelector","filterSelectColumn","filterInputColumn","prefix","throw","stateSaving","dom","buttons","globals","options","defaultOptions","language","data","tableID","attr","serverSide","source","columnFilter","recalc","bind","state","getOptions","getTranslations","getFilters","hasRequirementsOrThrow","getEventOptions","makeTable","$","get","each","eventKey","eventOption","events","extend","columnRow","find","length","autoReload","perPage","dataTableConfig","autoWidth","columns","initComplete","component","filterColumn","triggerEvent","order","orderCellsTop","processing","responsive","stateSave","tableColumns","ajax","url","filterRow","loaded","bindReload","method","on","listenToEvent","fn","push","arguments","eventArguments","index","apply","page","len","draw","validOptionsSortOrder","column","columnName","columnData","columnOrderable","columnSearchable","indexOf","name","orderable","searchable","sortColumn","defSearchable","sortColumnOrder","defOrderable","eq","colIdx","tableFilter","tableColumn","initFilterSelect","initFilterInput","defaultOrder","debouncedFiltering","debounce","columnEvent","input","validSortOrders","searchValue","search","debounceDelay","initFilterVisible","val","searchString","initialSearchValue","delimiter","undefined","Array","isArray","join","visible","interval","setInterval","reload","func","wait","immediate","timeout","context","args","clearTimeout","setTimeout","value","regex","slice","filters","allButtons","columnFilters","split","filterName","fields","hideButtons","filter","field","text","show","jQuery","isEmptyObject","all","hide"],"mappings":"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","file":"datatables.core.js","sourcesContent":["/**\n * Way2Web DataTables package.\n */\nclass DataTable {\n    /**\n     * Initialize all the different components.\n     *\n     * @param {object} $table\n     * @param {object} userOptions\n     * @param {object} eventOptions\n     * @param {object} translations\n     */\n    constructor($table, userOptions, eventOptions, translations) {\n        this.version = '2.1.1';\n\n        this.table = $table;\n        this.userOptions = userOptions;\n        this.eventOptions = eventOptions;\n        this.translations = translations;\n\n        this.elements = {\n            columnRowSelector: '.js-table-columns',\n            filterRowSelector: '.js-table-filters',\n            filterSelectColumn: '.js-select-filter',\n            filterInputColumn: '.js-input-filter'\n        };\n\n        this.prefix = {\n            throw: 'w2wDataTables: '\n        };\n\n        this.defaultOptions = {\n            language: 'en',\n            stateSaving: true,\n            dom: '<\"row\"<\"col-md-4\"f><\"col-md-4 col-md-offset-4 text-right\">>trlip<\"clear\">',\n            buttons: []\n        };\n\n        this.globals = {\n            options: {},\n            source: $table.data('source'),\n            columnFilter: $table.data('column-filter'),\n            autoReload: $table.data('auto-reload'),\n            perPage: $table.data('per-page'),\n            tableID: $table.attr('id'),\n            serverSide: true,\n            table: false,\n            state: false,\n            translations: {},\n            debounceDelay: 250\n        };\n\n        this.events = {\n            'draw.dt': [this.recalc.bind(this)],\n            'init.dt': [],\n            initComplete: []\n        };\n    }\n\n    /**\n     * Check if all fields are ok.\n     * Create the datatable.\n     */\n    init() {\n        this.globals.options = this.getOptions();\n        this.globals.translations = this.getTranslations();\n        this.globals.options.buttons = this.getFilters();\n        this.hasRequirementsOrThrow();\n        this.getEventOptions();\n        this.makeTable();\n    }\n\n    /**\n     * Get the options.\n     *\n     * @return {object}\n     */\n    getOptions() {\n        return $.extend(this.defaultOptions, this.userOptions);\n    }\n\n    /**\n     * Get the translations.\n     *\n     * @return {object}\n     */\n    getTranslations() {\n        return this.translations.get(this.globals.options.language);\n    }\n\n    /**\n     * Get the custom event options, and merge with the default the events.\n     */\n    getEventOptions() {\n        $.each(this.eventOptions, function(eventKey, eventOption) {\n            this.events[eventKey] = $.extend({}, this.events[eventKey], eventOption || {});\n        });\n    }\n\n    /**\n     * Check if all fields are ok.\n     */\n    hasRequirementsOrThrow() {\n        let columnRow = this.table.find(this.elements.columnRowSelector);\n\n        if (typeof this.globals.source === 'undefined' || this.globals.source === '') {\n            this.globals.serverSide = false;\n        }\n\n        if (typeof this.globals.tableID === 'undefined' || this.globals.tableID === '') {\n            throw this.prefix.throw + 'missing id attribute!';\n        }\n\n        if (columnRow.length === 0) {\n            throw this.prefix.throw + 'missing column row (' + this.elements.columnRowSelector + ')!';\n        }\n\n        if (typeof this.globals.autoReload !== 'undefined' && !this.globals.autoReload > 0) {\n            throw this.prefix.throw + 'invalid reload interval!';\n        }\n        if (typeof this.globals.perPage !== 'undefined' && !this.globals.perPage > 0) {\n            throw this.prefix.throw + 'invalid amount per page!';\n        }\n    }\n\n    /**\n     * Create the datatable.\n     */\n    makeTable() {\n        let tableColumns = this.getColumns();\n        let tableOrder = this.getOrder();\n\n        let dataTableConfig = {\n            autoWidth: false,\n            columns: tableColumns,\n\n            /**\n             * init complete.\n             */\n            initComplete: function() {\n                let filterRow = dataTableConfig.component.table.find(\n                    dataTableConfig.component.elements.filterRowSelector\n                );\n\n                if (filterRow.length > 0) {\n                    dataTableConfig.component.filterColumn();\n                }\n\n                dataTableConfig.component.triggerEvent('initComplete');\n            },\n            order: tableOrder,\n            orderCellsTop: true,\n            processing: true,\n            responsive: true,\n            serverSide: this.globals.serverSide,\n            stateSave: this.globals.options.stateSaving,\n            component: this\n        };\n\n        let component = this;\n\n        $.extend(dataTableConfig, this.globals.options);\n        dataTableConfig.language = this.globals.translations;\n\n        if (this.globals.serverSide == true) {\n            dataTableConfig.ajax = {\n                method: 'POST',\n                url: this.globals.source\n            };\n        }\n\n        if (!this.table) {\n            throw 'Unknown element for the datatable!';\n        }\n\n        // eslint-disable-next-line new-cap\n        this.globals.table = this.table.DataTable(dataTableConfig);\n\n        this.globals.state = this.globals.table.state.loaded();\n\n        this.setFilterValues();\n\n        if (typeof this.globals.autoReload !== 'undefined') {\n            this.bindReload(this.globals.autoReload);\n        }\n\n        if (typeof this.globals.perPage !== 'undefined') {\n            this.globals.options.perPage = this.globals.perPage;\n        }\n\n        if (typeof this.globals.options.perPage !== 'undefined') {\n            this.setPageLength();\n        }\n\n        this.globals.table.on('init.dt', function() {\n            component.triggerEvent('init.dt');\n        });\n\n        // once the table has been drawn, ensure a responsive reculcation\n        // if we do not do this, pagination might cause columns to go outside the table\n        $.each(this.events, this.listenToEvent.bind(this));\n\n        if (this.globals.serverSide != true) {\n            this.filterColumn();\n        }\n    }\n\n    /**\n     * Add a new event.\n     *\n     * @param {string} on\n     * @param {Function} fn\n     */\n    addEvent(on, fn) {\n        if (!this.events[on]) {\n            this.events[on] = [];\n        }\n\n        this.events[on].push(fn);\n    }\n\n    /**\n     * Listen to an event.\n     *\n     * @param {string} eventKey\n     */\n    listenToEvent(eventKey) {\n        let component = this;\n\n        this.globals.table.on(eventKey, function() {\n            component.triggerEvent(eventKey, arguments);\n        });\n    }\n\n    /**\n     * Trigger an event.\n     *\n     * @param {key}   on\n     * @param {array} eventArguments\n     */\n    triggerEvent(on, eventArguments) {\n        if (!this.events[on]) {\n            return;\n        }\n\n        $.each(this.events[on], function(index, fn) {\n            fn.apply(this, eventArguments);\n        });\n    }\n\n    /**\n     * Set the page length.\n     */\n    setPageLength() {\n        this.globals.table.page.len(this.globals.options.perPage).draw();\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getColumns() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let columns = [];\n\n        tableColumns.each(function() {\n            // set default options\n            let defOrderable = true;\n            let defSearchable = true;\n            let validOptionsSortOrder = [true, false];\n            // get the column values\n            let column = $(this);\n            let columnName = column.data('name');\n            let columnData = column.data('data');\n            let columnOrderable = column.data('orderable');\n            let columnSearchable = column.data('searchable');\n\n            if (typeof columnData === 'undefined') {\n                columnData = columnName;\n            }\n\n            if (typeof columnOrderable === 'undefined' || !validOptionsSortOrder.indexOf(columnOrderable)) {\n                columnOrderable = defOrderable;\n            }\n\n            if (typeof columnSearchable === 'undefined' || !validOptionsSortOrder.indexOf(columnSearchable)) {\n                columnSearchable = defSearchable;\n            }\n\n            columns.push({\n                data: columnData,\n                name: columnName,\n                orderable: columnOrderable,\n                searchable: columnSearchable\n            });\n        });\n\n        return columns;\n    }\n\n    /**\n     * Get the order.\n     *\n     * @return {array}\n     */\n    getOrder() {\n        let defaultOrder = [[0, 'desc']];\n        let validSortOrders = ['asc', 'desc'];\n        let sortColumn = this.table.find('[data-default-sort=\"true\"]');\n        let sortColumnOrder = sortColumn.data('default-sort-order');\n\n        if (sortColumn.length === 0) {\n            // no custom sort column on this table - use the default settings\n            return defaultOrder;\n        }\n\n        if (typeof sortColumnOrder === 'undefined') {\n            throw this.prefix.throw +\n                'You must add a sorting order (default-sort-order=\"asc/desc\")' +\n                ' if you are filtering on a custom column!';\n        }\n\n        if (validSortOrders.indexOf(sortColumnOrder) == -1) {\n            throw this.prefix.throw +\n                'You must add a valid sorting order (asc/desc) if you are filtering on a custom column!';\n        }\n\n        return [[sortColumn.index(), sortColumnOrder]];\n    }\n\n    /**\n     * Filter the columns.\n     */\n    filterColumn() {\n        let component = this;\n\n        if (!component.globals.table) {\n            return;\n        }\n\n        component.globals.table\n            .columns()\n            .eq(0)\n            .each(function(colIdx) {\n                let tableFilter = component.table.find(component.elements.filterRowSelector + ' th:eq(' + colIdx + ')');\n                let tableColumn = component.table.find(component.elements.columnRowSelector + ' th:eq(' + colIdx + ')');\n\n                component.initFilterSelect(colIdx, tableFilter);\n                component.initFilterInput(colIdx, tableFilter);\n                component.initFilterVisible(colIdx, tableColumn);\n            });\n    }\n\n    /**\n     * Initialize the input filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterInput(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            const searchValue = $(this).val();\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(searchValue)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterInputColumn).on('input', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Initialize the select filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterSelect(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            let searchValue = $(this).val();\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(component.searchString(searchValue), true, false)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterSelectColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterSelectColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Returns a delimited string from an array or the original search value.\n     *\n     * @param  {*} initialSearchValue\n     * @param  {string} [delimiter='|']\n     *\n     * @return {*}\n     */\n    searchString(initialSearchValue, delimiter = '|') {\n        let searchValue = initialSearchValue;\n\n        if (!searchValue || (Array.isArray(searchValue) && searchValue.length < 1)) {\n            return '';\n        }\n\n        if (Array.isArray(searchValue) && searchValue.length > 0) {\n            searchValue = searchValue.join(delimiter);\n        }\n\n        return '^' + searchValue + '$';\n    }\n\n    /**\n     * Initialize if the column is visible.\n     *\n     * @param {string} colIdx\n     * @param {object} tableColumn\n     */\n    initFilterVisible(colIdx, tableColumn) {\n        let visible = tableColumn.data('visible');\n\n        if (typeof visible === 'undefined') {\n            visible = true;\n        }\n\n        this.globals.table.column(colIdx).visible(visible);\n    }\n\n    /**\n     * Bind the reload.\n     *\n     * @param {string} interval\n     */\n    bindReload(interval) {\n        setInterval(function() {\n            this.globals.table.ajax.reload();\n        }, interval);\n    }\n\n    /**\n     * Debounce a function.\n     *\n     * @param {object} func\n     * @param {number} wait\n     * @param {boolean} immediate\n     *\n     * @return {object}\n     */\n    debounce(func, wait, immediate) {\n        let timeout;\n\n        return function() {\n            let context = this;\n            let args = arguments;\n\n            clearTimeout(timeout);\n            timeout = setTimeout(function() {\n                timeout = null;\n                if (!immediate) {\n                    func.apply(context, args);\n                }\n            }, wait);\n            if (immediate && !timeout) {\n                func.apply(context, args);\n            }\n        };\n    }\n\n    /**\n     * Recalc the table.\n     */\n    recalc() {\n        if (!this.globals.table) {\n            return;\n        }\n\n        this.globals.table.responsive.recalc();\n    }\n\n    /**\n     * Set the filter values.\n     */\n    setFilterValues() {\n        let component = this;\n\n        if (!component.globals.state || !component.globals.state.columns) {\n            return;\n        }\n\n        $.each(component.globals.state.columns, function(column, value) {\n            let searchValue = value.search.search;\n\n            if (!searchValue) {\n                return;\n            }\n\n            // On a dropdown, regex is used for the search, to receive only values with the exact value.\n            // Check the function initFilterSelect, before and after the search value, a char is added.\n            // We have to remove the first and last char from the saved search value to select the dropdown value.\n            if (value.search.regex) {\n                searchValue = searchValue.slice(1, -1);\n            }\n\n            component.table\n                .find(component.elements.filterRowSelector + ' th')\n                .eq(column)\n                .find('.form-control')\n                .val(searchValue);\n        });\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getFilters() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let filters = {};\n        let buttons = [];\n        let allButtons = [];\n        let component = this;\n\n        if (component.globals.options.buttons) {\n            buttons = this.globals.options.buttons;\n        }\n\n        tableColumns.each(function() {\n            let column = $(component);\n            let columnName = column.data('name');\n            let columnFilters = column.data('filter');\n\n            if (!columnFilters) {\n                allButtons.push(columnName + ':name');\n\n                return;\n            }\n\n            $.each(columnFilters.split('|'), function(index, columnFilter) {\n                if (!filters[columnFilter]) {\n                    filters[columnFilter] = [];\n                }\n\n                if (filters[columnFilter].indexOf(columnName + ':name') < 0) {\n                    filters[columnFilter].push(columnName + ':name');\n                }\n            });\n\n            allButtons.push(columnName + ':name');\n        });\n\n        $.each(filters, function(filterName, fields) {\n            let hideButtons = allButtons.filter(function(field) {\n                return fields.indexOf(field) < 0;\n            });\n\n            buttons.push({\n                extend: 'colvisGroup',\n                text: filterName,\n                show: fields,\n                hide: hideButtons\n            });\n        });\n\n        if (!jQuery.isEmptyObject(filters) && buttons.length > 0) {\n            buttons.push({\n                extend: 'colvisGroup',\n                text: component.globals.translations.all,\n                show: allButtons,\n                hide: []\n            });\n        }\n\n        if (component.globals.columnFilter == true) {\n            buttons.push({\n                extend: 'colvis',\n                text: '<i class=\"fa fa-columns\"></i> ' + component.globals.translations.columns\n            });\n        }\n\n        return buttons;\n    }\n\n    /**\n     * Get the datatable object.\n     *\n     * @return {object}\n     */\n    getTable() {\n        return this.globals.table;\n    }\n}\n"]}