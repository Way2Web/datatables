{"version":3,"sources":["datatables.core.js"],"names":["DataTable","$table","userOptions","eventOptions","translations","_classCallCheck","this","version","table","elements","columnRowSelector","filterRowSelector","filterSelectColumn","filterInputColumn","stateSaving","prefix","buttons","showAlertForXhrInactivity","defaultOptions","language","handleXhrInactivity","showAlertForErrors","data","handleErrors","autoReload","globals","options","attr","serverSide","columnFilter","perPage","tableID","state","events","recalc","bind","debounceDelay","initComplete","onXhr","error.dt","$","fn","dataTable","errMode","e","settings","json","xhr","status","responseJSON","error","oInit","alert","techNote","message","getOptions","getTranslations","getFilters","hasRequirementsOrThrow","getEventOptions","makeTable","extend","get","each","eventKey","eventOption","columnRow","find","source","length","dataTableConfig","autoWidth","columns","getColumns","component","filterColumn","tableColumns","triggerEvent","getOrder","responsive","stateSave","ajax","tableOrder","orderCellsTop","loaded","method","bindReload","listenToEvent","setPageLength","on","push","arguments","eventArguments","index","apply","page","len","draw","columnData","validOptionsSortOrder","columnName","column","columnOrderable","columnSearchable","indexOf","defOrderable","sortColumn","orderable","sortColumnOrder","validSortOrders","eq","colIdx","initFilterSelect","tableFilter","initFilterInput","tableColumn","input","searchValue","search","debouncedFiltering","val","searchString","debounce","columnEvent","initialSearchValue","delimiter","undefined","Array","isArray","join","interval","reload","setInterval","wait","immediate","timeout","context","args","clearTimeout","setTimeout","func","value","regex","slice","filters","columnFilters","allButtons","split","fields","hideButtons","filter","field","text","filterName","show","all","hide"],"mappings":"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","file":"datatables.core.js","sourcesContent":["/**\n * Way2Web DataTables package.\n */\nclass DataTable {\n    /**\n     * Initialize all the different components.\n     *\n     * @param {object} $table\n     * @param {object} userOptions\n     * @param {object} eventOptions\n     * @param {object} translations\n     */\n    constructor($table, userOptions, eventOptions, translations) {\n        this.version = '2.1.1';\n\n        this.table = $table;\n        this.userOptions = userOptions;\n        this.eventOptions = eventOptions;\n        this.translations = translations;\n\n        this.elements = {\n            columnRowSelector: '.js-table-columns',\n            filterRowSelector: '.js-table-filters',\n            filterSelectColumn: '.js-select-filter',\n            filterInputColumn: '.js-input-filter'\n        };\n\n        this.prefix = {\n            throw: 'w2wDataTables: '\n        };\n\n        this.defaultOptions = {\n            language: 'en',\n            stateSaving: true,\n            dom: '<\"row\"<\"col-md-4\"f><\"col-md-4 col-md-offset-4 text-right\">>trlip<\"clear\">',\n            buttons: [],\n            showAlertForXhrInactivity: true,\n            handleXhrInactivity: () => {},\n            showAlertForErrors: true,\n            handleErrors: () => {}\n        };\n\n        this.globals = {\n            options: {},\n            source: $table.data('source'),\n            columnFilter: $table.data('column-filter'),\n            autoReload: $table.data('auto-reload'),\n            perPage: $table.data('per-page'),\n            tableID: $table.attr('id'),\n            serverSide: true,\n            table: false,\n            state: false,\n            translations: {},\n            debounceDelay: 250\n        };\n\n        this.events = {\n            'draw.dt': [this.recalc.bind(this)],\n            'init.dt': [],\n            initComplete: [],\n            'xhr.dt': [this.onXhr.bind(this)],\n            'error.dt': [this.onError.bind(this)]\n        };\n\n        $.fn.dataTable.ext.errMode = 'none';\n    }\n\n    /**\n     * Handle XHR results\n     *\n     * @param {*} e jQuery event object\n     * @param {*} settings DataTables settings object\n     * @param {*} json ata returned from the server. This will be null if triggered by the Ajax error callback.\n     * @param {*} xhr jQuery XHR object that can be used to access the low level Ajax options.\n     */\n    onXhr(e, settings, json, xhr) {\n        if (xhr.status === 200) {\n            return;\n        }\n\n        if (xhr.status === 403 && xhr.responseJSON.error === 'CSRF token validation failed') {\n            if (settings.oInit.showAlertForXhrInactivity) {\n                alert('You need to refresh the page due to an extended period of inactivity');\n            }\n\n            settings.oInit.handleXhrInactivity();\n        } else {\n            if (settings.oInit.showAlertForErrors) {\n                alert('Something went wrong. The administrator has been notified. Please try again later.');\n            }\n\n            settings.oInit.handleErrors();\n\n            throw this.prefix.throw + 'Ajax call returned a ' + xhr.status + ' status code';\n        }\n    }\n\n    /**\n     * Handle DataTable errors\n     *\n     * Except 'Ajax errors' (http://datatables.net/tn/7), because we handle them ourselves in onXhr\n     *\n     * @param {*} e jQuery event object\n     * @param {*} settings DataTables settings object\n     * @param {*} techNote Tech note error number - use http://datatables.net/tn/{techNote} to look up a description\n     * @param {*} message Description of error\n     */\n    onError(e, settings, techNote, message) {\n        if (techNote !== 7) {\n            if (settings.oInit.showAlertForErrors) {\n                alert('Something went wrong. The administrator has been notified. Please try again later.');\n            }\n\n            settings.oInit.handleErrors();\n\n            throw this.prefix.throw + message;\n        }\n    }\n\n    /**\n     * Check if all fields are ok.\n     * Create the datatable.\n     */\n    init() {\n        this.globals.options = this.getOptions();\n        this.globals.translations = this.getTranslations();\n        this.globals.options.buttons = this.getFilters();\n        this.hasRequirementsOrThrow();\n        this.getEventOptions();\n        this.makeTable();\n    }\n\n    /**\n     * Get the options.\n     *\n     * @return {object}\n     */\n    getOptions() {\n        return $.extend(this.defaultOptions, this.userOptions);\n    }\n\n    /**\n     * Get the translations.\n     *\n     * @return {object}\n     */\n    getTranslations() {\n        return this.translations.get(this.globals.options.language);\n    }\n\n    /**\n     * Get the custom event options, and merge with the default the events.\n     */\n    getEventOptions() {\n        $.each(this.eventOptions, function(eventKey, eventOption) {\n            this.events[eventKey] = $.extend({}, this.events[eventKey], eventOption || {});\n        });\n    }\n\n    /**\n     * Check if all fields are ok.\n     */\n    hasRequirementsOrThrow() {\n        let columnRow = this.table.find(this.elements.columnRowSelector);\n\n        if (typeof this.globals.source === 'undefined' || this.globals.source === '') {\n            this.globals.serverSide = false;\n        }\n\n        if (typeof this.globals.tableID === 'undefined' || this.globals.tableID === '') {\n            throw this.prefix.throw + 'missing id attribute!';\n        }\n\n        if (columnRow.length === 0) {\n            throw this.prefix.throw + 'missing column row (' + this.elements.columnRowSelector + ')!';\n        }\n\n        if (typeof this.globals.autoReload !== 'undefined' && !this.globals.autoReload > 0) {\n            throw this.prefix.throw + 'invalid reload interval!';\n        }\n        if (typeof this.globals.perPage !== 'undefined' && !this.globals.perPage > 0) {\n            throw this.prefix.throw + 'invalid amount per page!';\n        }\n    }\n\n    /**\n     * Create the datatable.\n     */\n    makeTable() {\n        let tableColumns = this.getColumns();\n        let tableOrder = this.getOrder();\n\n        let dataTableConfig = {\n            autoWidth: false,\n            columns: tableColumns,\n\n            /**\n             * init complete.\n             */\n            initComplete: function() {\n                let filterRow = dataTableConfig.component.table.find(\n                    dataTableConfig.component.elements.filterRowSelector\n                );\n\n                if (filterRow.length > 0) {\n                    dataTableConfig.component.filterColumn();\n                }\n\n                dataTableConfig.component.triggerEvent('initComplete');\n            },\n            order: tableOrder,\n            orderCellsTop: true,\n            processing: true,\n            responsive: true,\n            serverSide: this.globals.serverSide,\n            stateSave: this.globals.options.stateSaving,\n            component: this\n        };\n\n        let component = this;\n\n        $.extend(dataTableConfig, this.globals.options);\n        dataTableConfig.language = this.globals.translations;\n\n        if (this.globals.serverSide == true) {\n            dataTableConfig.ajax = {\n                method: 'POST',\n                url: this.globals.source\n            };\n        }\n\n        if (!this.table) {\n            throw 'Unknown element for the datatable!';\n        }\n\n        // eslint-disable-next-line new-cap\n        this.globals.table = this.table.DataTable(dataTableConfig);\n\n        this.globals.state = this.globals.table.state.loaded();\n\n        this.setFilterValues();\n\n        if (typeof this.globals.autoReload !== 'undefined') {\n            this.bindReload(this.globals.autoReload);\n        }\n\n        if (typeof this.globals.perPage !== 'undefined') {\n            this.globals.options.perPage = this.globals.perPage;\n        }\n\n        if (typeof this.globals.options.perPage !== 'undefined') {\n            this.setPageLength();\n        }\n\n        this.globals.table.on('init.dt', function() {\n            component.triggerEvent('init.dt');\n        });\n\n        // once the table has been drawn, ensure a responsive reculcation\n        // if we do not do this, pagination might cause columns to go outside the table\n        $.each(this.events, this.listenToEvent.bind(this));\n\n        if (this.globals.serverSide != true) {\n            this.filterColumn();\n        }\n    }\n\n    /**\n     * Add a new event.\n     *\n     * @param {string} on\n     * @param {Function} fn\n     */\n    addEvent(on, fn) {\n        if (!this.events[on]) {\n            this.events[on] = [];\n        }\n\n        this.events[on].push(fn);\n    }\n\n    /**\n     * Listen to an event.\n     *\n     * @param {string} eventKey\n     */\n    listenToEvent(eventKey) {\n        let component = this;\n\n        this.globals.table.on(eventKey, function() {\n            component.triggerEvent(eventKey, arguments);\n        });\n    }\n\n    /**\n     * Trigger an event.\n     *\n     * @param {key}   on\n     * @param {array} eventArguments\n     */\n    triggerEvent(on, eventArguments) {\n        if (!this.events[on]) {\n            return;\n        }\n\n        $.each(this.events[on], function(index, fn) {\n            fn.apply(this, eventArguments);\n        });\n    }\n\n    /**\n     * Set the page length.\n     */\n    setPageLength() {\n        this.globals.table.page.len(this.globals.options.perPage).draw();\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getColumns() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let columns = [];\n\n        tableColumns.each(function() {\n            // set default options\n            let defOrderable = true;\n            let defSearchable = true;\n            let validOptionsSortOrder = [true, false];\n            // get the column values\n            let column = $(this);\n            let columnName = column.data('name');\n            let columnData = column.data('data');\n            let columnOrderable = column.data('orderable');\n            let columnSearchable = column.data('searchable');\n\n            if (typeof columnData === 'undefined') {\n                columnData = columnName;\n            }\n\n            if (typeof columnOrderable === 'undefined' || !validOptionsSortOrder.indexOf(columnOrderable)) {\n                columnOrderable = defOrderable;\n            }\n\n            if (typeof columnSearchable === 'undefined' || !validOptionsSortOrder.indexOf(columnSearchable)) {\n                columnSearchable = defSearchable;\n            }\n\n            columns.push({\n                data: columnData,\n                name: columnName,\n                orderable: columnOrderable,\n                searchable: columnSearchable\n            });\n        });\n\n        return columns;\n    }\n\n    /**\n     * Get the order.\n     *\n     * @return {array}\n     */\n    getOrder() {\n        let defaultOrder = [[0, 'desc']];\n        let validSortOrders = ['asc', 'desc'];\n        let sortColumn = this.table.find('[data-default-sort=\"true\"]');\n        let sortColumnOrder = sortColumn.data('default-sort-order');\n\n        if (sortColumn.length === 0) {\n            // no custom sort column on this table - use the default settings\n            return defaultOrder;\n        }\n\n        if (typeof sortColumnOrder === 'undefined') {\n            throw this.prefix.throw +\n                'You must add a sorting order (default-sort-order=\"asc/desc\")' +\n                ' if you are filtering on a custom column!';\n        }\n\n        if (validSortOrders.indexOf(sortColumnOrder) == -1) {\n            throw this.prefix.throw +\n                'You must add a valid sorting order (asc/desc) if you are filtering on a custom column!';\n        }\n\n        return [[sortColumn.index(), sortColumnOrder]];\n    }\n\n    /**\n     * Filter the columns.\n     */\n    filterColumn() {\n        let component = this;\n\n        if (!component.globals.table) {\n            return;\n        }\n\n        component.globals.table\n            .columns()\n            .eq(0)\n            .each(function(colIdx) {\n                let tableFilter = component.table.find(component.elements.filterRowSelector + ' th:eq(' + colIdx + ')');\n                let tableColumn = component.table.find(component.elements.columnRowSelector + ' th:eq(' + colIdx + ')');\n\n                component.initFilterSelect(colIdx, tableFilter);\n                component.initFilterInput(colIdx, tableFilter);\n            });\n    }\n\n    /**\n     * Initialize the input filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterInput(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            const searchValue = $(this).val();\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(searchValue)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterInputColumn).on('input', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Initialize the select filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterSelect(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            let searchValue = $(this).val();\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(component.searchString(searchValue), true, false)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterSelectColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterSelectColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Returns a delimited string from an array or the original search value.\n     *\n     * @param  {*} initialSearchValue\n     * @param  {string} [delimiter='|']\n     *\n     * @return {*}\n     */\n    searchString(initialSearchValue, delimiter = '|') {\n        let searchValue = initialSearchValue;\n\n        if (!searchValue || (Array.isArray(searchValue) && searchValue.length < 1)) {\n            return '';\n        }\n\n        if (Array.isArray(searchValue) && searchValue.length > 0) {\n            searchValue = searchValue.join(delimiter);\n        }\n\n        return '^' + searchValue + '$';\n    }\n\n    /**\n     * Bind the reload.\n     *\n     * @param {string} interval\n     */\n    bindReload(interval) {\n        setInterval(function() {\n            this.globals.table.ajax.reload();\n        }, interval);\n    }\n\n    /**\n     * Debounce a function.\n     *\n     * @param {object} func\n     * @param {number} wait\n     * @param {boolean} immediate\n     *\n     * @return {object}\n     */\n    debounce(func, wait, immediate) {\n        let timeout;\n\n        return function() {\n            let context = this;\n            let args = arguments;\n\n            clearTimeout(timeout);\n            timeout = setTimeout(function() {\n                timeout = null;\n                if (!immediate) {\n                    func.apply(context, args);\n                }\n            }, wait);\n            if (immediate && !timeout) {\n                func.apply(context, args);\n            }\n        };\n    }\n\n    /**\n     * Recalc the table.\n     */\n    recalc() {\n        if (!this.globals.table) {\n            return;\n        }\n\n        this.globals.table.responsive.recalc();\n    }\n\n    /**\n     * Set the filter values.\n     */\n    setFilterValues() {\n        let component = this;\n\n        if (!component.globals.state || !component.globals.state.columns) {\n            return;\n        }\n\n        $.each(component.globals.state.columns, function(column, value) {\n            let searchValue = value.search.search;\n\n            if (!searchValue) {\n                return;\n            }\n\n            // On a dropdown, regex is used for the search, to receive only values with the exact value.\n            // Check the function initFilterSelect, before and after the search value, a char is added.\n            // We have to remove the first and last char from the saved search value to select the dropdown value.\n            if (value.search.regex) {\n                searchValue = searchValue.slice(1, -1);\n            }\n\n            component.table\n                .find(component.elements.filterRowSelector + ' th')\n                .eq(column)\n                .find('.form-control')\n                .val(searchValue);\n        });\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getFilters() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let filters = {};\n        let buttons = [];\n        let allButtons = [];\n        let component = this;\n\n        if (component.globals.options.buttons) {\n            buttons = this.globals.options.buttons;\n        }\n\n        tableColumns.each(function() {\n            let column = $(component);\n            let columnName = column.data('name');\n            let columnFilters = column.data('filter');\n\n            if (!columnFilters) {\n                allButtons.push(columnName + ':name');\n\n                return;\n            }\n\n            $.each(columnFilters.split('|'), function(index, columnFilter) {\n                if (!filters[columnFilter]) {\n                    filters[columnFilter] = [];\n                }\n\n                if (filters[columnFilter].indexOf(columnName + ':name') < 0) {\n                    filters[columnFilter].push(columnName + ':name');\n                }\n            });\n\n            allButtons.push(columnName + ':name');\n        });\n\n        $.each(filters, function(filterName, fields) {\n            let hideButtons = allButtons.filter(function(field) {\n                return fields.indexOf(field) < 0;\n            });\n\n            buttons.push({\n                extend: 'colvisGroup',\n                text: filterName,\n                show: fields,\n                hide: hideButtons\n            });\n        });\n\n        if (!jQuery.isEmptyObject(filters) && buttons.length > 0) {\n            buttons.push({\n                extend: 'colvisGroup',\n                text: component.globals.translations.all,\n                show: allButtons,\n                hide: []\n            });\n        }\n\n        if (component.globals.columnFilter == true) {\n            buttons.push({\n                extend: 'colvis',\n                text: '<i class=\"fa fa-columns\"></i> ' + component.globals.translations.columns\n            });\n        }\n\n        return buttons;\n    }\n\n    /**\n     * Get the datatable object.\n     *\n     * @return {object}\n     */\n    getTable() {\n        return this.globals.table;\n    }\n}\n"]}