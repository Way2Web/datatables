{"version":3,"sources":["datatables.core.js"],"names":["DataTable","$table","userOptions","eventOptions","translations","_classCallCheck","this","version","table","elements","columnRowSelector","filterRowSelector","filterSelectColumn","filterInputColumn","stateSaving","prefix","buttons","language","source","data","autoReload","globals","options","attr","serverSide","columnFilter","perPage","tableID","state","events","recalc","bind","debounceDelay","initComplete","getOptions","getTranslations","getFilters","hasRequirementsOrThrow","getEventOptions","makeTable","$","extend","defaultOptions","each","eventKey","eventOption","columnRow","find","length","dataTableConfig","autoWidth","columns","getColumns","component","filterColumn","tableOrder","getOrder","triggerEvent","tableColumns","processing","responsive","stateSave","order","ajax","orderCellsTop","loaded","url","setFilterValues","bindReload","on","listenToEvent","setPageLength","push","fn","arguments","eventArguments","index","apply","page","len","draw","validOptionsSortOrder","column","columnName","columnData","columnOrderable","columnSearchable","indexOf","defOrderable","defSearchable","name","sortColumn","searchable","sortColumnOrder","eq","tableFilter","colIdx","initFilterSelect","initFilterInput","columnEvent","input","val","searchValue","search","debouncedFiltering","debounce","searchString","initialSearchValue","delimiter","undefined","Array","isArray","join","setInterval","reload","interval","context","args","clearTimeout","timeout","setTimeout","immediate","func","wait","value","regex","slice","allButtons","text","columnFilters","split","filters","filterName","fields","hideButtons","filter","field","jQuery","isEmptyObject","all","show","hide"],"mappings":"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","file":"datatables.core.js","sourcesContent":["/**\n * Way2Web DataTables package.\n */\nclass DataTable {\n    /**\n     * Initialize all the different components.\n     *\n     * @param {object} $table\n     * @param {object} userOptions\n     * @param {object} eventOptions\n     * @param {object} translations\n     */\n    constructor($table, userOptions, eventOptions, translations) {\n        this.version = '2.1.1';\n\n        this.table = $table;\n        this.userOptions = userOptions;\n        this.eventOptions = eventOptions;\n        this.translations = translations;\n\n        this.elements = {\n            columnRowSelector: '.js-table-columns',\n            filterRowSelector: '.js-table-filters',\n            filterSelectColumn: '.js-select-filter',\n            filterInputColumn: '.js-input-filter'\n        };\n\n        this.prefix = {\n            throw: 'w2wDataTables: '\n        };\n\n        this.defaultOptions = {\n            language: 'en',\n            stateSaving: true,\n            dom: '<\"row\"<\"col-md-4\"f><\"col-md-4 col-md-offset-4 text-right\">>trlip<\"clear\">',\n            buttons: []\n        };\n\n        this.globals = {\n            options: {},\n            source: $table.data('source'),\n            columnFilter: $table.data('column-filter'),\n            autoReload: $table.data('auto-reload'),\n            perPage: $table.data('per-page'),\n            tableID: $table.attr('id'),\n            serverSide: true,\n            table: false,\n            state: false,\n            translations: {},\n            debounceDelay: 250\n        };\n\n        this.events = {\n            'draw.dt': [this.recalc.bind(this)],\n            'init.dt': [],\n            initComplete: []\n        };\n    }\n\n    /**\n     * Check if all fields are ok.\n     * Create the datatable.\n     */\n    init() {\n        this.globals.options = this.getOptions();\n        this.globals.translations = this.getTranslations();\n        this.globals.options.buttons = this.getFilters();\n        this.hasRequirementsOrThrow();\n        this.getEventOptions();\n        this.makeTable();\n    }\n\n    /**\n     * Get the options.\n     *\n     * @return {object}\n     */\n    getOptions() {\n        return $.extend(this.defaultOptions, this.userOptions);\n    }\n\n    /**\n     * Get the translations.\n     *\n     * @return {object}\n     */\n    getTranslations() {\n        return this.translations.get(this.globals.options.language);\n    }\n\n    /**\n     * Get the custom event options, and merge with the default the events.\n     */\n    getEventOptions() {\n        $.each(this.eventOptions, function(eventKey, eventOption) {\n            this.events[eventKey] = $.extend({}, this.events[eventKey], eventOption || {});\n        });\n    }\n\n    /**\n     * Check if all fields are ok.\n     */\n    hasRequirementsOrThrow() {\n        let columnRow = this.table.find(this.elements.columnRowSelector);\n\n        if (typeof this.globals.source === 'undefined' || this.globals.source === '') {\n            this.globals.serverSide = false;\n        }\n\n        if (typeof this.globals.tableID === 'undefined' || this.globals.tableID === '') {\n            throw this.prefix.throw + 'missing id attribute!';\n        }\n\n        if (columnRow.length === 0) {\n            throw this.prefix.throw + 'missing column row (' + this.elements.columnRowSelector + ')!';\n        }\n\n        if (typeof this.globals.autoReload !== 'undefined' && !this.globals.autoReload > 0) {\n            throw this.prefix.throw + 'invalid reload interval!';\n        }\n        if (typeof this.globals.perPage !== 'undefined' && !this.globals.perPage > 0) {\n            throw this.prefix.throw + 'invalid amount per page!';\n        }\n    }\n\n    /**\n     * Create the datatable.\n     */\n    makeTable() {\n        let tableColumns = this.getColumns();\n        let tableOrder = this.getOrder();\n\n        let dataTableConfig = {\n            autoWidth: false,\n            columns: tableColumns,\n\n            /**\n             * init complete.\n             */\n            initComplete: function() {\n                let filterRow = dataTableConfig.component.table.find(\n                    dataTableConfig.component.elements.filterRowSelector\n                );\n\n                if (filterRow.length > 0) {\n                    dataTableConfig.component.filterColumn();\n                }\n\n                dataTableConfig.component.triggerEvent('initComplete');\n            },\n            order: tableOrder,\n            orderCellsTop: true,\n            processing: true,\n            responsive: true,\n            serverSide: this.globals.serverSide,\n            stateSave: this.globals.options.stateSaving,\n            component: this\n        };\n\n        let component = this;\n\n        $.extend(dataTableConfig, this.globals.options);\n        dataTableConfig.language = this.globals.translations;\n\n        if (this.globals.serverSide == true) {\n            dataTableConfig.ajax = {\n                method: 'POST',\n                url: this.globals.source\n            };\n        }\n\n        if (!this.table) {\n            throw 'Unknown element for the datatable!';\n        }\n\n        // eslint-disable-next-line new-cap\n        this.globals.table = this.table.DataTable(dataTableConfig);\n\n        this.globals.state = this.globals.table.state.loaded();\n\n        this.setFilterValues();\n\n        if (typeof this.globals.autoReload !== 'undefined') {\n            this.bindReload(this.globals.autoReload);\n        }\n\n        if (typeof this.globals.perPage !== 'undefined') {\n            this.globals.options.perPage = this.globals.perPage;\n        }\n\n        if (typeof this.globals.options.perPage !== 'undefined') {\n            this.setPageLength();\n        }\n\n        this.globals.table.on('init.dt', function() {\n            component.triggerEvent('init.dt');\n        });\n\n        // once the table has been drawn, ensure a responsive reculcation\n        // if we do not do this, pagination might cause columns to go outside the table\n        $.each(this.events, this.listenToEvent.bind(this));\n\n        if (this.globals.serverSide != true) {\n            this.filterColumn();\n        }\n    }\n\n    /**\n     * Add a new event.\n     *\n     * @param {string} on\n     * @param {Function} fn\n     */\n    addEvent(on, fn) {\n        if (!this.events[on]) {\n            this.events[on] = [];\n        }\n\n        this.events[on].push(fn);\n    }\n\n    /**\n     * Listen to an event.\n     *\n     * @param {string} eventKey\n     */\n    listenToEvent(eventKey) {\n        let component = this;\n\n        this.globals.table.on(eventKey, function() {\n            component.triggerEvent(eventKey, arguments);\n        });\n    }\n\n    /**\n     * Trigger an event.\n     *\n     * @param {key}   on\n     * @param {array} eventArguments\n     */\n    triggerEvent(on, eventArguments) {\n        if (!this.events[on]) {\n            return;\n        }\n\n        $.each(this.events[on], function(index, fn) {\n            fn.apply(this, eventArguments);\n        });\n    }\n\n    /**\n     * Set the page length.\n     */\n    setPageLength() {\n        this.globals.table.page.len(this.globals.options.perPage).draw();\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getColumns() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let columns = [];\n\n        tableColumns.each(function() {\n            // set default options\n            let defOrderable = true;\n            let defSearchable = true;\n            let validOptionsSortOrder = [true, false];\n            // get the column values\n            let column = $(this);\n            let columnName = column.data('name');\n            let columnData = column.data('data');\n            let columnOrderable = column.data('orderable');\n            let columnSearchable = column.data('searchable');\n\n            if (typeof columnData === 'undefined') {\n                columnData = columnName;\n            }\n\n            if (typeof columnOrderable === 'undefined' || !validOptionsSortOrder.indexOf(columnOrderable)) {\n                columnOrderable = defOrderable;\n            }\n\n            if (typeof columnSearchable === 'undefined' || !validOptionsSortOrder.indexOf(columnSearchable)) {\n                columnSearchable = defSearchable;\n            }\n\n            columns.push({\n                data: columnData,\n                name: columnName,\n                orderable: columnOrderable,\n                searchable: columnSearchable\n            });\n        });\n\n        return columns;\n    }\n\n    /**\n     * Get the order.\n     *\n     * @return {array}\n     */\n    getOrder() {\n        let defaultOrder = [[0, 'desc']];\n        let validSortOrders = ['asc', 'desc'];\n        let sortColumn = this.table.find('[data-default-sort=\"true\"]');\n        let sortColumnOrder = sortColumn.data('default-sort-order');\n\n        if (sortColumn.length === 0) {\n            // no custom sort column on this table - use the default settings\n            return defaultOrder;\n        }\n\n        if (typeof sortColumnOrder === 'undefined') {\n            throw this.prefix.throw +\n                'You must add a sorting order (default-sort-order=\"asc/desc\")' +\n                ' if you are filtering on a custom column!';\n        }\n\n        if (validSortOrders.indexOf(sortColumnOrder) == -1) {\n            throw this.prefix.throw +\n                'You must add a valid sorting order (asc/desc) if you are filtering on a custom column!';\n        }\n\n        return [[sortColumn.index(), sortColumnOrder]];\n    }\n\n    /**\n     * Filter the columns.\n     */\n    filterColumn() {\n        let component = this;\n\n        if (!component.globals.table) {\n            return;\n        }\n\n        component.globals.table\n            .columns()\n            .eq(0)\n            .each(function(colIdx) {\n                let tableFilter = component.table.find(component.elements.filterRowSelector + ' th:eq(' + colIdx + ')');\n                let tableColumn = component.table.find(component.elements.columnRowSelector + ' th:eq(' + colIdx + ')');\n\n                component.initFilterSelect(colIdx, tableFilter);\n                component.initFilterInput(colIdx, tableFilter);\n            });\n    }\n\n    /**\n     * Initialize the input filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterInput(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            const searchValue = $(this).val();\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(searchValue)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterInputColumn).on('input', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Initialize the select filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterSelect(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            let searchValue = $(this).val();\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(component.searchString(searchValue), true, false)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterSelectColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterSelectColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Returns a delimited string from an array or the original search value.\n     *\n     * @param  {*} initialSearchValue\n     * @param  {string} [delimiter='|']\n     *\n     * @return {*}\n     */\n    searchString(initialSearchValue, delimiter = '|') {\n        let searchValue = initialSearchValue;\n\n        if (!searchValue || (Array.isArray(searchValue) && searchValue.length < 1)) {\n            return '';\n        }\n\n        if (Array.isArray(searchValue) && searchValue.length > 0) {\n            searchValue = searchValue.join(delimiter);\n        }\n\n        return '^' + searchValue + '$';\n    }\n\n    /**\n     * Bind the reload.\n     *\n     * @param {string} interval\n     */\n    bindReload(interval) {\n        setInterval(function() {\n            this.globals.table.ajax.reload();\n        }, interval);\n    }\n\n    /**\n     * Debounce a function.\n     *\n     * @param {object} func\n     * @param {number} wait\n     * @param {boolean} immediate\n     *\n     * @return {object}\n     */\n    debounce(func, wait, immediate) {\n        let timeout;\n\n        return function() {\n            let context = this;\n            let args = arguments;\n\n            clearTimeout(timeout);\n            timeout = setTimeout(function() {\n                timeout = null;\n                if (!immediate) {\n                    func.apply(context, args);\n                }\n            }, wait);\n            if (immediate && !timeout) {\n                func.apply(context, args);\n            }\n        };\n    }\n\n    /**\n     * Recalc the table.\n     */\n    recalc() {\n        if (!this.globals.table) {\n            return;\n        }\n\n        this.globals.table.responsive.recalc();\n    }\n\n    /**\n     * Set the filter values.\n     */\n    setFilterValues() {\n        let component = this;\n\n        if (!component.globals.state || !component.globals.state.columns) {\n            return;\n        }\n\n        $.each(component.globals.state.columns, function(column, value) {\n            let searchValue = value.search.search;\n\n            if (!searchValue) {\n                return;\n            }\n\n            // On a dropdown, regex is used for the search, to receive only values with the exact value.\n            // Check the function initFilterSelect, before and after the search value, a char is added.\n            // We have to remove the first and last char from the saved search value to select the dropdown value.\n            if (value.search.regex) {\n                searchValue = searchValue.slice(1, -1);\n            }\n\n            component.table\n                .find(component.elements.filterRowSelector + ' th')\n                .eq(column)\n                .find('.form-control')\n                .val(searchValue);\n        });\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getFilters() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let filters = {};\n        let buttons = [];\n        let allButtons = [];\n        let component = this;\n\n        if (component.globals.options.buttons) {\n            buttons = this.globals.options.buttons;\n        }\n\n        tableColumns.each(function() {\n            let column = $(component);\n            let columnName = column.data('name');\n            let columnFilters = column.data('filter');\n\n            if (!columnFilters) {\n                allButtons.push(columnName + ':name');\n\n                return;\n            }\n\n            $.each(columnFilters.split('|'), function(index, columnFilter) {\n                if (!filters[columnFilter]) {\n                    filters[columnFilter] = [];\n                }\n\n                if (filters[columnFilter].indexOf(columnName + ':name') < 0) {\n                    filters[columnFilter].push(columnName + ':name');\n                }\n            });\n\n            allButtons.push(columnName + ':name');\n        });\n\n        $.each(filters, function(filterName, fields) {\n            let hideButtons = allButtons.filter(function(field) {\n                return fields.indexOf(field) < 0;\n            });\n\n            buttons.push({\n                extend: 'colvisGroup',\n                text: filterName,\n                show: fields,\n                hide: hideButtons\n            });\n        });\n\n        if (!jQuery.isEmptyObject(filters) && buttons.length > 0) {\n            buttons.push({\n                extend: 'colvisGroup',\n                text: component.globals.translations.all,\n                show: allButtons,\n                hide: []\n            });\n        }\n\n        if (component.globals.columnFilter == true) {\n            buttons.push({\n                extend: 'colvis',\n                text: '<i class=\"fa fa-columns\"></i> ' + component.globals.translations.columns\n            });\n        }\n\n        return buttons;\n    }\n\n    /**\n     * Get the datatable object.\n     *\n     * @return {object}\n     */\n    getTable() {\n        return this.globals.table;\n    }\n}\n"]}