{"version":3,"sources":["datatables.core.js"],"names":["DataTable","$table","userOptions","eventOptions","translations","_classCallCheck","this","version","table","elements","columnRowSelector","filterRowSelector","filterSelectColumn","filterInputColumn","prefix","throw","stateSaving","dom","buttons","globals","options","language","data","tableID","attr","serverSide","source","columnFilter","recalc","bind","state","getOptions","getTranslations","getFilters","hasRequirementsOrThrow","getEventOptions","makeTable","$","get","each","eventKey","eventOption","events","extend","columnRow","find","length","autoReload","perPage","tableColumns","tableOrder","dataTableConfig","autoWidth","columns","initComplete","filterRow","component","filterColumn","triggerEvent","order","orderCellsTop","processing","responsive","stateSave","getColumns","getOrder","ajax","method","on","listenToEvent","fn","push","arguments","eventArguments","index","apply","page","len","draw","defOrderable","defSearchable","validOptionsSortOrder","column","columnName","columnData","columnOrderable","columnSearchable","indexOf","name","orderable","searchable","defaultOrder","validSortOrders","sortColumn","sortColumnOrder","eq","colIdx","tableFilter","tableColumn","initFilterSelect","initFilterInput","debouncedFiltering","debounce","columnEvent","input","searchValue","search","debounceDelay","initFilterVisible","val","searchString","initialSearchValue","delimiter","undefined","Array","isArray","join","visible","interval","setInterval","reload","func","wait","immediate","timeout","context","args","clearTimeout","setTimeout","value","regex","slice","allButtons","columnFilters","filters","filterName","fields","hideButtons","filter","field","text","show","hide","all"],"mappings":"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","file":"datatables.core.js","sourcesContent":["/**\n * Way2Web DataTables package.\n */\nclass DataTable {\n    /**\n     * Initialize all the different components.\n     *\n     * @param {object} $table\n     * @param {object} userOptions\n     * @param {object} eventOptions\n     * @param {object} translations\n     */\n    constructor($table, userOptions, eventOptions, translations) {\n        this.version = '1.0.0';\n\n        this.table = $table;\n        this.userOptions = userOptions;\n        this.eventOptions = eventOptions;\n        this.translations = translations;\n\n        this.elements = {\n            columnRowSelector: '.js-table-columns',\n            filterRowSelector: '.js-table-filters',\n            filterSelectColumn: '.js-select-filter',\n            filterInputColumn: '.js-input-filter'\n        };\n\n        this.prefix = {\n            throw: 'w2wDataTables: '\n        };\n\n        this.defaultOptions = {\n            language: 'en',\n            stateSaving: true,\n            dom: '<\"row\"<\"col-md-4\"f><\"col-md-4 col-md-offset-4 text-right\">>trlip<\"clear\">',\n            buttons: []\n        };\n\n        this.globals = {\n            options: {},\n            source: $table.data('source'),\n            columnFilter: $table.data('column-filter'),\n            autoReload: $table.data('auto-reload'),\n            perPage: $table.data('per-page'),\n            tableID: $table.attr('id'),\n            serverSide: true,\n            table: false,\n            state: false,\n            translations: {},\n            debounceDelay: 250\n        };\n\n        this.events = {\n            'draw.dt': [this.recalc.bind(this)],\n            'init.dt': [],\n            initComplete: []\n        };\n    }\n\n    /**\n     * Check if all fields are ok.\n     * Create the datatable.\n     */\n    init() {\n        this.globals.options = this.getOptions();\n        this.globals.translations = this.getTranslations();\n        this.globals.options.buttons = this.getFilters();\n        this.hasRequirementsOrThrow();\n        this.getEventOptions();\n        this.makeTable();\n    }\n\n    /**\n     * Get the options.\n     *\n     * @return {object}\n     */\n    getOptions() {\n        return $.extend(this.defaultOptions, this.userOptions);\n    }\n\n    /**\n     * Get the translations.\n     *\n     * @return {object}\n     */\n    getTranslations() {\n        return this.translations.get(this.globals.options.language);\n    }\n\n    /**\n     * Get the custom event options, and merge with the default the events.\n     */\n    getEventOptions() {\n        $.each(this.eventOptions, function(eventKey, eventOption) {\n            this.events[eventKey] = $.extend({}, this.events[eventKey], eventOption || {});\n        });\n    }\n\n    /**\n     * Check if all fields are ok.\n     */\n    hasRequirementsOrThrow() {\n        let columnRow = this.table.find(this.elements.columnRowSelector);\n\n        if (typeof this.globals.source === 'undefined' || this.globals.source === '') {\n            this.globals.serverSide = false;\n        }\n\n        if (typeof this.globals.tableID === 'undefined' || this.globals.tableID === '') {\n            throw this.prefix.throw + 'missing id attribute!';\n        }\n\n        if (columnRow.length === 0) {\n            throw this.prefix.throw + 'missing column row (' + this.elements.columnRowSelector + ')!';\n        }\n\n        if (typeof this.globals.autoReload !== 'undefined' && !this.globals.autoReload > 0) {\n            throw this.prefix.throw + 'invalid reload interval!';\n        }\n        if (typeof this.globals.perPage !== 'undefined' && !this.globals.perPage > 0) {\n            throw this.prefix.throw + 'invalid amount per page!';\n        }\n    }\n\n    /**\n     * Create the datatable.\n     */\n    makeTable() {\n        let tableColumns = this.getColumns();\n        let tableOrder = this.getOrder();\n\n        let dataTableConfig = {\n            autoWidth: false,\n            columns: tableColumns,\n\n            /**\n             * init complete.\n             */\n            initComplete: function() {\n                let filterRow = dataTableConfig.component.table.find(\n                    dataTableConfig.component.elements.filterRowSelector\n                );\n\n                if (filterRow.length > 0) {\n                    dataTableConfig.component.filterColumn();\n                }\n\n                dataTableConfig.component.triggerEvent('initComplete');\n            },\n            language: this.globals.translations,\n            order: tableOrder,\n            orderCellsTop: true,\n            processing: true,\n            responsive: true,\n            serverSide: this.globals.serverSide,\n            stateSave: this.globals.options.stateSaving,\n            dom: this.globals.options.dom,\n            component: this\n        };\n\n        let component = this;\n\n        if (this.globals.options.buttons) {\n            dataTableConfig.buttons = this.globals.options.buttons;\n        }\n\n        if (this.globals.serverSide == true) {\n            dataTableConfig.ajax = {\n                method: 'POST',\n                url: this.globals.source\n            };\n        }\n\n        if (!this.table) {\n            throw 'Unknown element for the datatable!';\n        }\n\n        // eslint-disable-next-line new-cap\n        this.globals.table = this.table.DataTable(dataTableConfig);\n\n        this.globals.state = this.globals.table.state.loaded();\n\n        this.setFilterValues();\n\n        if (typeof this.globals.autoReload !== 'undefined') {\n            this.bindReload(this.globals.autoReload);\n        }\n\n        if (typeof this.globals.perPage !== 'undefined') {\n            this.globals.options.perPage = this.globals.perPage;\n        }\n\n        if (typeof this.globals.options.perPage !== 'undefined') {\n            this.setPageLength();\n        }\n\n        this.globals.table.on('init.dt', function() {\n            component.triggerEvent('init.dt');\n        });\n\n        // once the table has been drawn, ensure a responsive reculcation\n        // if we do not do this, pagination might cause columns to go outside the table\n        $.each(this.events, this.listenToEvent.bind(this));\n\n        if (this.globals.serverSide != true) {\n            this.filterColumn();\n        }\n    }\n\n    /**\n     * Add a new event.\n     *\n     * @param {string} on\n     * @param {Function} fn\n     */\n    addEvent(on, fn) {\n        if (!this.events[on]) {\n            this.events[on] = [];\n        }\n\n        this.events[on].push(fn);\n    }\n\n    /**\n     * Listen to an event.\n     *\n     * @param {string} eventKey\n     */\n    listenToEvent(eventKey) {\n        let component = this;\n\n        this.globals.table.on(eventKey, function() {\n            component.triggerEvent(eventKey, arguments);\n        });\n    }\n\n    /**\n     * Trigger an event.\n     *\n     * @param {key}   on\n     * @param {array} eventArguments\n     */\n    triggerEvent(on, eventArguments) {\n        if (!this.events[on]) {\n            return;\n        }\n\n        $.each(this.events[on], function(index, fn) {\n            fn.apply(this, eventArguments);\n        });\n    }\n\n    /**\n     * Set the page length.\n     */\n    setPageLength() {\n        this.globals.table.page.len(this.globals.options.perPage).draw();\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getColumns() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let columns = [];\n\n        tableColumns.each(function() {\n            // set default options\n            let defOrderable = true;\n            let defSearchable = true;\n            let validOptionsSortOrder = [true, false];\n            // get the column values\n            let column = $(this);\n            let columnName = column.data('name');\n            let columnData = column.data('data');\n            let columnOrderable = column.data('orderable');\n            let columnSearchable = column.data('searchable');\n\n            if (typeof columnData === 'undefined') {\n                columnData = columnName;\n            }\n\n            if (typeof columnOrderable === 'undefined' || !validOptionsSortOrder.indexOf(columnOrderable)) {\n                columnOrderable = defOrderable;\n            }\n\n            if (typeof columnSearchable === 'undefined' || !validOptionsSortOrder.indexOf(columnSearchable)) {\n                columnSearchable = defSearchable;\n            }\n\n            columns.push({\n                data: columnData,\n                name: columnName,\n                orderable: columnOrderable,\n                searchable: columnSearchable\n            });\n        });\n\n        return columns;\n    }\n\n    /**\n     * Get the order.\n     *\n     * @return {array}\n     */\n    getOrder() {\n        let defaultOrder = [[0, 'desc']];\n        let validSortOrders = ['asc', 'desc'];\n        let sortColumn = this.table.find('[data-default-sort=\"true\"]');\n        let sortColumnOrder = sortColumn.data('default-sort-order');\n\n        if (sortColumn.length === 0) {\n            // no custom sort column on this table - use the default settings\n            return defaultOrder;\n        }\n\n        if (typeof sortColumnOrder === 'undefined') {\n            throw this.prefix.throw +\n                'You must add a sorting order (default-sort-order=\"asc/desc\")' +\n                ' if you are filtering on a custom column!';\n        }\n\n        if (validSortOrders.indexOf(sortColumnOrder) == -1) {\n            throw this.prefix.throw +\n                'You must add a valid sorting order (asc/desc) if you are filtering on a custom column!';\n        }\n\n        return [[sortColumn.index(), sortColumnOrder]];\n    }\n\n    /**\n     * Filter the columns.\n     */\n    filterColumn() {\n        let component = this;\n\n        if (!component.globals.table) {\n            return;\n        }\n\n        component.globals.table\n            .columns()\n            .eq(0)\n            .each(function(colIdx) {\n                let tableFilter = component.table.find(component.elements.filterRowSelector + ' th:eq(' + colIdx + ')');\n                let tableColumn = component.table.find(component.elements.columnRowSelector + ' th:eq(' + colIdx + ')');\n\n                component.initFilterSelect(colIdx, tableFilter);\n                component.initFilterInput(colIdx, tableFilter);\n                component.initFilterVisible(colIdx, tableColumn);\n            });\n    }\n\n    /**\n     * Initialize the input filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterInput(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            const searchValue = $(this).val();\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(searchValue)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterInputColumn).on('input', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Initialize the select filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterSelect(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            let searchValue = $(this).val();\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(component.searchString(searchValue), true, false)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterSelectColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterSelectColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Returns a delimited string from an array or the original search value.\n     *\n     * @param  {*} initialSearchValue\n     * @param  {string} [delimiter='|']\n     *\n     * @return {*}\n     */\n    searchString(initialSearchValue, delimiter = '|') {\n        let searchValue = initialSearchValue;\n\n        if (!searchValue || (Array.isArray(searchValue) && searchValue.length < 1)) {\n            return '';\n        }\n\n        if (Array.isArray(searchValue) && searchValue.length > 0) {\n            searchValue = searchValue.join(delimiter);\n        }\n\n        return '^' + searchValue + '$';\n    }\n\n    /**\n     * Initialize if the column is visible.\n     *\n     * @param {string} colIdx\n     * @param {object} tableColumn\n     */\n    initFilterVisible(colIdx, tableColumn) {\n        let visible = tableColumn.data('visible');\n\n        if (typeof visible === 'undefined') {\n            visible = true;\n        }\n\n        this.globals.table.column(colIdx).visible(visible);\n    }\n\n    /**\n     * Bind the reload.\n     *\n     * @param {string} interval\n     */\n    bindReload(interval) {\n        setInterval(function() {\n            this.globals.table.ajax.reload();\n        }, interval);\n    }\n\n    /**\n     * Debounce a function.\n     *\n     * @param {object} func\n     * @param {number} wait\n     * @param {boolean} immediate\n     *\n     * @return {object}\n     */\n    debounce(func, wait, immediate) {\n        let timeout;\n\n        return function() {\n            let context = this;\n            let args = arguments;\n\n            clearTimeout(timeout);\n            timeout = setTimeout(function() {\n                timeout = null;\n                if (!immediate) {\n                    func.apply(context, args);\n                }\n            }, wait);\n            if (immediate && !timeout) {\n                func.apply(context, args);\n            }\n        };\n    }\n\n    /**\n     * Recalc the table.\n     */\n    recalc() {\n        if (!this.globals.table) {\n            return;\n        }\n\n        this.globals.table.responsive.recalc();\n    }\n\n    /**\n     * Set the filter values.\n     */\n    setFilterValues() {\n        let component = this;\n\n        if (!component.globals.state || !component.globals.state.columns) {\n            return;\n        }\n\n        $.each(component.globals.state.columns, function(column, value) {\n            let searchValue = value.search.search;\n\n            // On a dropdown, regex is used for the search, to receive only values with the exact value.\n            // Check the function initFilterSelect, before and after the search value, a char is added.\n            // We have to remove the first and last char from the saved search value to select the dropdown value.\n            if (value.search.regex) {\n                searchValue = searchValue.slice(1, -1);\n            }\n\n            component.table\n                .find(component.elements.filterRowSelector + ' .form-control')\n                .eq(column)\n                .val(searchValue);\n        });\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getFilters() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let filters = {};\n        let buttons = [];\n        let allButtons = [];\n        let component = this;\n\n        if (component.globals.options.buttons) {\n            buttons = this.globals.options.buttons;\n        }\n\n        tableColumns.each(function() {\n            let column = $(component);\n            let columnName = column.data('name');\n            let columnFilters = column.data('filter');\n\n            if (!columnFilters) {\n                allButtons.push(columnName + ':name');\n\n                return;\n            }\n\n            $.each(columnFilters.split('|'), function(index, columnFilter) {\n                if (!filters[columnFilter]) {\n                    filters[columnFilter] = [];\n                }\n\n                if (filters[columnFilter].indexOf(columnName + ':name') < 0) {\n                    filters[columnFilter].push(columnName + ':name');\n                }\n            });\n\n            allButtons.push(columnName + ':name');\n        });\n\n        $.each(filters, function(filterName, fields) {\n            let hideButtons = allButtons.filter(function(field) {\n                return fields.indexOf(field) < 0;\n            });\n\n            buttons.push({\n                extend: 'colvisGroup',\n                text: filterName,\n                show: fields,\n                hide: hideButtons\n            });\n        });\n\n        if (!jQuery.isEmptyObject(filters) && buttons.length > 0) {\n            buttons.push({\n                extend: 'colvisGroup',\n                text: component.globals.translations.all,\n                show: allButtons,\n                hide: []\n            });\n        }\n\n        if (component.globals.columnFilter == true) {\n            buttons.push({\n                extend: 'colvis',\n                text: '<i class=\"fa fa-columns\"></i> ' + component.globals.translations.columns\n            });\n        }\n\n        return buttons;\n    }\n\n    /**\n     * Get the datatable object.\n     *\n     * @return {object}\n     */\n    getTable() {\n        return this.globals.table;\n    }\n}\n"]}