{"version":3,"sources":["datatables.core.js"],"names":["DataTable","$table","userOptions","eventOptions","translations","_classCallCheck","this","version","table","elements","columnRowSelector","filterRowSelector","filterSelectColumn","filterInputColumn","prefix","throw","defaultOptions","language","stateSaving","dom","buttons","globals","options","source","data","columnFilter","autoReload","perPage","tableID","attr","serverSide","state","debounceDelay","events","draw.dt","recalc","bind","init.dt","initComplete","getOptions","getTranslations","getFilters","hasRequirementsOrThrow","getEventOptions","makeTable","$","extend","get","each","eventKey","eventOption","columnRow","find","length","tableColumns","getColumns","tableOrder","getOrder","dataTableConfig","autoWidth","columns","filterRow","component","filterColumn","triggerEvent","order","orderCellsTop","processing","responsive","stateSave","ajax","method","url","loaded","setFilterValues","bindReload","setPageLength","on","listenToEvent","fn","push","arguments","eventArguments","index","apply","page","len","draw","defOrderable","defSearchable","validOptionsSortOrder","column","columnName","columnData","columnOrderable","columnSearchable","indexOf","name","orderable","searchable","defaultOrder","validSortOrders","sortColumn","sortColumnOrder","eq","colIdx","tableFilter","tableColumn","initFilterSelect","initFilterInput","initFilterVisible","debouncedFiltering","debounce","columnEvent","input","searchValue","val","search","regExSearch","visible","interval","setInterval","reload","func","wait","immediate","timeout","context","args","clearTimeout","setTimeout","value","regex","slice","filters","allButtons","columnFilters","split","filterName","fields","hideButtons","filter","field","text","show","hide","jQuery","isEmptyObject","all"],"mappings":"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","file":"app.js","sourcesContent":["/**\n * Way2Web DataTables package.\n */\nclass DataTable {\n    /**\n     * Initialize all the diffrent components.\n     *\n     * @param {object} $table\n     * @param {object} userOptions\n     * @param {object} eventOptions\n     * @param {object} translations\n     */\n    constructor($table, userOptions, eventOptions, translations) {\n        this.version = '0.3.0';\n\n        this.table = $table;\n        this.userOptions = userOptions;\n        this.eventOptions = eventOptions;\n        this.translations = translations;\n\n        this.elements = {\n            columnRowSelector: '.js-table-columns',\n            filterRowSelector: '.js-table-filters',\n            filterSelectColumn: '.js-select-filter',\n            filterInputColumn: '.js-input-filter'\n        };\n\n        this.prefix = {\n            throw: 'w2wDataTables: '\n        };\n\n        this.defaultOptions = {\n            language: 'en',\n            stateSaving: true,\n            dom: '<\"row\"<\"col-md-4\"f><\"col-md-4 col-md-offset-4 text-right\">>trlip<\"clear\">',\n            buttons: []\n        };\n\n        this.globals = {\n            options: {},\n            source: $table.data('source'),\n            columnFilter: $table.data('column-filter'),\n            autoReload: $table.data('auto-reload'),\n            perPage: $table.data('per-page'),\n            tableID: $table.attr('id'),\n            serverSide: true,\n            table: false,\n            state: false,\n            translations: {},\n            debounceDelay: 250\n        };\n\n        this.events = {\n            'draw.dt': [this.recalc.bind(this)],\n            'init.dt': [],\n            initComplete: []\n        };\n    }\n\n    /**\n     * Check if all fields are ok.\n     * Create the datatable.\n     */\n    init() {\n        this.globals.options = this.getOptions();\n        this.globals.translations = this.getTranslations();\n        this.globals.options.buttons = this.getFilters();\n        this.hasRequirementsOrThrow();\n        this.getEventOptions();\n        this.makeTable();\n    }\n\n    /**\n     * Get the options.\n     *\n     * @return {object}\n     */\n    getOptions() {\n        return $.extend(this.defaultOptions, this.userOptions);\n    }\n\n    /**\n     * Get the translations.\n     *\n     * @return {object}\n     */\n    getTranslations() {\n        return this.translations.get(this.globals.options.language);\n    }\n\n    /**\n     * Get the custom event options, and merge with the default the events.\n     */\n    getEventOptions() {\n        $.each(this.eventOptions, function(eventKey, eventOption) {\n            this.events[eventKey] = $.extend({}, this.events[eventKey], eventOption || {});\n        });\n    }\n\n    /**\n     * Check if all fields are ok.\n     */\n    hasRequirementsOrThrow() {\n        let columnRow = this.table.find(this.elements.columnRowSelector);\n\n        if (typeof this.globals.source === 'undefined' || this.globals.source === '') {\n            this.globals.serverSide = false;\n        }\n\n        if (typeof this.globals.tableID === 'undefined' || this.globals.tableID === '') {\n            throw this.prefix.throw + 'missing id attribute!';\n        }\n\n        if (columnRow.length === 0) {\n            throw this.prefix.throw + 'missing column row (' + this.elements.columnRowSelector + ')!';\n        }\n\n        if (typeof this.globals.autoReload !== 'undefined' && !this.globals.autoReload > 0) {\n            throw this.prefix.throw + 'invalid reload interval!';\n        }\n        if (typeof this.globals.perPage !== 'undefined' && !this.globals.perPage > 0) {\n            throw this.prefix.throw + 'invalid amount per page!';\n        }\n    }\n\n    /**\n     * Create the datatable.\n     */\n    makeTable() {\n        let tableColumns = this.getColumns();\n        let tableOrder = this.getOrder();\n\n        let dataTableConfig = {\n            autoWidth: false,\n            columns: tableColumns,\n\n            /**\n             * init complete.\n             */\n            initComplete: function() {\n                let filterRow = dataTableConfig.component.table.find(\n                    dataTableConfig.component.elements.filterRowSelector\n                );\n\n                if (filterRow.length > 0) {\n                    dataTableConfig.component.filterColumn();\n                }\n\n                dataTableConfig.component.triggerEvent('initComplete');\n            },\n            language: this.globals.translations,\n            order: tableOrder,\n            orderCellsTop: true,\n            processing: true,\n            responsive: true,\n            serverSide: this.globals.serverSide,\n            stateSave: this.globals.options.stateSaving,\n            dom: this.globals.options.dom,\n            component: this\n        };\n\n        let component = this;\n\n        if (this.globals.options.buttons) {\n            dataTableConfig.buttons = this.globals.options.buttons;\n        }\n\n        if (this.globals.serverSide == true) {\n            dataTableConfig.ajax = {\n                method: 'POST',\n                url: this.globals.source\n            };\n        }\n\n        // eslint-disable-next-line new-cap\n        this.globals.table = this.table.DataTable(dataTableConfig);\n\n        this.globals.state = this.globals.table.state.loaded();\n\n        this.setFilterValues();\n\n        if (typeof this.globals.autoReload !== 'undefined') {\n            this.bindReload(this.globals.autoReload);\n        }\n\n        if (typeof this.globals.perPage !== 'undefined') {\n            this.globals.options.perPage = this.globals.perPage;\n        }\n\n        if (typeof this.globals.options.perPage !== 'undefined') {\n            this.setPageLength();\n        }\n\n        this.globals.table.on('init.dt', function() {\n            component.triggerEvent('init.dt');\n        });\n\n        // once the table has been drawn, ensure a responsive reculcation\n        // if we do not do this, pagination might cause columns to go outside the table\n        $.each(this.events, this.listenToEvent.bind(this));\n\n        if (this.globals.serverSide != true) {\n            this.filterColumn();\n        }\n    }\n\n    /**\n     * Add a new event.\n     *\n     * @param {string} on\n     * @param {Function} fn\n     */\n    addEvent(on, fn) {\n        if (!this.events[on]) {\n            this.events[on] = [];\n        }\n\n        this.events[on].push(fn);\n    }\n\n    /**\n     * Listen to an event.\n     *\n     * @param {string} eventKey\n     */\n    listenToEvent(eventKey) {\n        let component = this;\n\n        this.globals.table.on(eventKey, function() {\n            component.triggerEvent(eventKey, arguments);\n        });\n    }\n\n    /**\n     * Trigger an event.\n     *\n     * @param {key}   on\n     * @param {array} eventArguments\n     */\n    triggerEvent(on, eventArguments) {\n        if (!this.events[on]) {\n            return;\n        }\n\n        $.each(this.events[on], function(index, fn) {\n            fn.apply(this, eventArguments);\n        });\n    }\n\n    /**\n     * Set the page length.\n     */\n    setPageLength() {\n        this.globals.table.page.len(this.globals.options.perPage).draw();\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getColumns() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let columns = [];\n\n        tableColumns.each(function() {\n            // set default options\n            let defOrderable = true;\n            let defSearchable = true;\n            let validOptionsSortOrder = [true, false];\n            // get the column values\n            let column = $(this);\n            let columnName = column.data('name');\n            let columnData = column.data('data');\n            let columnOrderable = column.data('orderable');\n            let columnSearchable = column.data('searchable');\n\n            if (typeof columnData === 'undefined') {\n                columnData = columnName;\n            }\n\n            if (typeof columnOrderable === 'undefined' || !validOptionsSortOrder.indexOf(columnOrderable)) {\n                columnOrderable = defOrderable;\n            }\n\n            if (typeof columnSearchable === 'undefined' || !validOptionsSortOrder.indexOf(columnSearchable)) {\n                columnSearchable = defSearchable;\n            }\n\n            columns.push({\n                data: columnData,\n                name: columnName,\n                orderable: columnOrderable,\n                searchable: columnSearchable\n            });\n        });\n\n        return columns;\n    }\n\n    /**\n     * Get the order.\n     *\n     * @return {array}\n     */\n    getOrder() {\n        let defaultOrder = [[0, 'desc']];\n        let validSortOrders = ['asc', 'desc'];\n        let sortColumn = this.table.find('[data-default-sort=\"true\"]');\n        let sortColumnOrder = sortColumn.data('default-sort-order');\n\n        if (sortColumn.length === 0) {\n            // no custom sort column on this table - use the default settings\n            return defaultOrder;\n        }\n\n        if (typeof sortColumnOrder === 'undefined') {\n            throw this.prefix.throw +\n                'You must add a sorting order (default-sort-order=\"asc/desc\")' +\n                ' if you are filtering on a custom column!';\n        }\n\n        if (validSortOrders.indexOf(sortColumnOrder) == -1) {\n            throw this.prefix.throw +\n                'You must add a valid sorting order (asc/desc) if you are filtering on a custom column!';\n        }\n\n        return [[sortColumn.index(), sortColumnOrder]];\n    }\n\n    /**\n     * Filter the columns.\n     */\n    filterColumn() {\n        let component = this;\n\n        if (!component.globals.table) {\n            return;\n        }\n\n        component.globals.table\n            .columns()\n            .eq(0)\n            .each(function(colIdx) {\n                let tableFilter = component.table.find(component.elements.filterRowSelector + ' th:eq(' + colIdx + ')');\n                let tableColumn = component.table.find(component.elements.columnRowSelector + ' th:eq(' + colIdx + ')');\n\n                component.initFilterSelect(colIdx, tableFilter);\n                component.initFilterInput(colIdx, tableFilter);\n                component.initFilterVisible(colIdx, tableColumn);\n            });\n    }\n\n    /**\n     * Initialize the input filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterInput(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            const searchValue = $(this).val();\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(searchValue)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterInputColumn).on('input', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Initialize the select filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterSelect(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            const searchValue = $(this).val();\n            let regExSearch = '';\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            if (searchValue) {\n                regExSearch = '^' + searchValue + '$';\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(regExSearch, true, false)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterSelectColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterSelectColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Initialize if the column is visible.\n     *\n     * @param {string} colIdx\n     * @param {object} tableColumn\n     */\n    initFilterVisible(colIdx, tableColumn) {\n        let visible = tableColumn.data('visible');\n\n        if (typeof visible === 'undefined') {\n            visible = true;\n        }\n\n        this.globals.table.column(colIdx).visible(visible);\n    }\n\n    /**\n     * Bind the reload.\n     *\n     * @param {string} interval\n     */\n    bindReload(interval) {\n        setInterval(function() {\n            this.globals.table.ajax.reload();\n        }, interval);\n    }\n\n    /**\n     * Debounce a function.\n     *\n     * @param {object} func\n     * @param {number} wait\n     * @param {boolean} immediate\n     *\n     * @return {object}\n     */\n    debounce(func, wait, immediate) {\n        let timeout;\n\n        return function() {\n            let context = this;\n            let args = arguments;\n\n            clearTimeout(timeout);\n            timeout = setTimeout(function() {\n                timeout = null;\n                if (!immediate) {\n                    func.apply(context, args);\n                }\n            }, wait);\n            if (immediate && !timeout) {\n                func.apply(context, args);\n            }\n        };\n    }\n\n    /**\n     * Recalc the table.\n     */\n    recalc() {\n        if (!this.globals.table) {\n            return;\n        }\n\n        this.globals.table.responsive.recalc();\n    }\n\n    /**\n     * Set the filter values.\n     */\n    setFilterValues() {\n        let component = this;\n\n        if (!component.globals.state || !component.globals.state.columns) {\n            return;\n        }\n\n        $.each(component.globals.state.columns, function(column, value) {\n            let searchValue = value.search.search;\n\n            // On a dropdown, regex is used for the search, to receive only values with the exact value.\n            // Check the function initFilterSelect, before and after the search value, a char is added.\n            // We have to remove the first and last char from the saved search value to select the dropdown value.\n            if (value.search.regex) {\n                searchValue = searchValue.slice(1, -1);\n            }\n\n            component.table\n                .find(component.elements.filterRowSelector + ' .form-control')\n                .eq(column)\n                .val(searchValue);\n        });\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getFilters() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let filters = {};\n        let buttons = [];\n        let allButtons = [];\n        let component = this;\n\n        if (component.globals.options.buttons) {\n            buttons = this.globals.options.buttons;\n        }\n\n        tableColumns.each(function() {\n            let column = $(component);\n            let columnName = column.data('name');\n            let columnFilters = column.data('filter');\n\n            if (!columnFilters) {\n                allButtons.push(columnName + ':name');\n\n                return;\n            }\n\n            $.each(columnFilters.split('|'), function(index, columnFilter) {\n                if (!filters[columnFilter]) {\n                    filters[columnFilter] = [];\n                }\n\n                if (filters[columnFilter].indexOf(columnName + ':name') < 0) {\n                    filters[columnFilter].push(columnName + ':name');\n                }\n            });\n\n            allButtons.push(columnName + ':name');\n        });\n\n        $.each(filters, function(filterName, fields) {\n            let hideButtons = allButtons.filter(function(field) {\n                return fields.indexOf(field) < 0;\n            });\n\n            buttons.push({\n                extend: 'colvisGroup',\n                text: filterName,\n                show: fields,\n                hide: hideButtons\n            });\n        });\n\n        if (!jQuery.isEmptyObject(filters) && buttons.length > 0) {\n            buttons.push({\n                extend: 'colvisGroup',\n                text: component.globals.translations.all,\n                show: allButtons,\n                hide: []\n            });\n        }\n\n        if (component.globals.columnFilter == true) {\n            buttons.push({\n                extend: 'colvis',\n                text: '<i class=\"fa fa-columns\"></i> ' + component.globals.translations.columns\n            });\n        }\n\n        return buttons;\n    }\n\n    /**\n     * Get the datatable object.\n     *\n     * @return {object}\n     */\n    getTable() {\n        return this.globals.table;\n    }\n}\n"]}