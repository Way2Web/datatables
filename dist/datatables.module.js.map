{"version":3,"file":"datatables.module.js","sources":["../src/datatables.js"],"sourcesContent":["import $ from 'jquery';\n\nimport 'datatables.net/js/jquery.dataTables';\nimport 'datatables.net-bs4/js/dataTables.bootstrap4';\n\nimport 'datatables.net-buttons/js/dataTables.buttons';\nimport 'datatables.net-buttons-bs4/js/buttons.bootstrap4';\nimport 'datatables.net-buttons/js/buttons.colVis';\nimport 'datatables.net-buttons/js/buttons.html5';\nimport 'datatables.net-buttons/js/buttons.print';\n\nimport 'datatables.net-responsive/js/dataTables.responsive';\nimport 'datatables.net-responsive-bs4/js/responsive.bootstrap4';\n\n/**\n * Way2Web DataTables package.\n */\nclass DataTable {\n    /**\n     * Initialize all the different components.\n     *\n     * @param {object} $table\n     * @param {object} userOptions\n     * @param {object} eventOptions\n     * @param {object} translations\n     */\n    constructor($table, userOptions, eventOptions, translations) {\n        this.version = '3.0.0';\n\n        this.table = $table;\n        this.userOptions = userOptions;\n        this.eventOptions = eventOptions;\n        this.translations = translations;\n\n        this.elements = {\n            columnRowSelector: '.js-table-columns',\n            filterRowSelector: '.js-table-filters',\n            filterSelectColumn: '.js-select-filter',\n            filterInputColumn: '.js-input-filter'\n        };\n\n        this.prefix = {\n            throw: 'w2wDataTables: '\n        };\n\n        this.defaultOptions = {\n            language: 'en',\n            stateSaving: true,\n            dom: '<\"row\"<\"col-md-4\"f><\"col-md-4 col-md-offset-4 text-right\">>trlip<\"clear\">',\n            buttons: [],\n            showAlertForXhrInactivity: true,\n            handleXhrInactivity: () => {},\n            showAlertForErrors: true,\n            handleErrors: () => {}\n        };\n\n        this.globals = {\n            options: {},\n            source: $table.data('source'),\n            columnFilter: $table.data('column-filter'),\n            autoReload: $table.data('auto-reload'),\n            perPage: $table.data('per-page'),\n            tableID: $table.attr('id'),\n            serverSide: true,\n            table: false,\n            state: false,\n            translations: {},\n            debounceDelay: 250\n        };\n\n        this.events = {\n            'draw.dt': [this.recalc.bind(this)],\n            'init.dt': [],\n            initComplete: [],\n            'xhr.dt': [this.onXhr.bind(this)],\n            'error.dt': [this.onError.bind(this)]\n        };\n\n        $.fn.dataTable.ext.errMode = 'none';\n    }\n\n    /**\n     * Handle XHR results\n     *\n     * @param {*} e jQuery event object\n     * @param {*} settings DataTables settings object\n     * @param {*} json Data returned from the server. This will be null if triggered by the Ajax error callback.\n     * @param {*} xhr jQuery XHR object that can be used to access the low level Ajax options.\n     */\n    onXhr(e, settings, json, xhr) {\n        if (xhr.status === 200) {\n            return;\n        }\n\n        if (xhr.status === 403 && xhr.responseJSON.error === 'CSRF token validation failed') {\n            if (settings.oInit.showAlertForXhrInactivity) {\n                alert('You need to refresh the page due to an extended period of inactivity');\n            }\n\n            settings.oInit.handleXhrInactivity();\n        } else {\n            if (settings.oInit.showAlertForErrors) {\n                alert('Something went wrong. The administrator has been notified. Please try again later.');\n            }\n\n            settings.oInit.handleErrors();\n\n            throw this.prefix.throw + 'Ajax call returned a ' + xhr.status + ' status code';\n        }\n    }\n\n    /**\n     * Handle DataTable errors\n     *\n     * Except 'Ajax errors' (http://datatables.net/tn/7), because we handle them ourselves in onXhr\n     *\n     * @param {*} e jQuery event object\n     * @param {*} settings DataTables settings object\n     * @param {*} techNote Tech note error number - use http://datatables.net/tn/{techNote} to look up a description\n     * @param {*} message Description of error\n     */\n    onError(e, settings, techNote, message) {\n        if (techNote !== 7) {\n            if (settings.oInit.showAlertForErrors) {\n                alert('Something went wrong. The administrator has been notified. Please try again later.');\n            }\n\n            settings.oInit.handleErrors();\n\n            throw this.prefix.throw + message;\n        }\n    }\n\n    /**\n     * Check if all fields are ok.\n     * Create the datatable.\n     */\n    init() {\n        this.globals.options = this.getOptions();\n        this.globals.translations = this.getTranslations();\n        this.globals.options.buttons = this.getFilters();\n        this.hasRequirementsOrThrow();\n        this.getEventOptions();\n        this.makeTable();\n    }\n\n    /**\n     * Get the options.\n     *\n     * @return {object}\n     */\n    getOptions() {\n        return $.extend(this.defaultOptions, this.userOptions);\n    }\n\n    /**\n     * Get the translations.\n     *\n     * @return {object}\n     */\n    getTranslations() {\n        return this.translations.get(this.globals.options.language);\n    }\n\n    /**\n     * Get the custom event options, and merge with the default the events.\n     */\n    getEventOptions() {\n        $.each(this.eventOptions, function(eventKey, eventOption) {\n            this.events[eventKey] = $.extend({}, this.events[eventKey], eventOption || {});\n        });\n    }\n\n    /**\n     * Check if all fields are ok.\n     */\n    hasRequirementsOrThrow() {\n        let columnRow = this.table.find(this.elements.columnRowSelector);\n\n        if (typeof this.globals.source === 'undefined' || this.globals.source === '') {\n            this.globals.serverSide = false;\n        }\n\n        if (typeof this.globals.tableID === 'undefined' || this.globals.tableID === '') {\n            throw this.prefix.throw + 'missing id attribute!';\n        }\n\n        if (columnRow.length === 0) {\n            throw this.prefix.throw + 'missing column row (' + this.elements.columnRowSelector + ')!';\n        }\n\n        if (typeof this.globals.autoReload !== 'undefined' && !this.globals.autoReload > 0) {\n            throw this.prefix.throw + 'invalid reload interval!';\n        }\n        if (typeof this.globals.perPage !== 'undefined' && !this.globals.perPage > 0) {\n            throw this.prefix.throw + 'invalid amount per page!';\n        }\n    }\n\n    /**\n     * Create the datatable.\n     */\n    makeTable() {\n        let tableColumns = this.getColumns();\n        let tableOrder = this.getOrder();\n\n        let dataTableConfig = {\n            autoWidth: false,\n            columns: tableColumns,\n\n            /**\n             * init complete.\n             */\n            initComplete: function() {\n                let filterRow = dataTableConfig.component.table.find(\n                    dataTableConfig.component.elements.filterRowSelector\n                );\n\n                if (filterRow.length > 0) {\n                    dataTableConfig.component.filterColumn();\n                }\n\n                dataTableConfig.component.triggerEvent('initComplete');\n            },\n            order: tableOrder,\n            orderCellsTop: true,\n            processing: true,\n            responsive: true,\n            serverSide: this.globals.serverSide,\n            stateSave: this.globals.options.stateSaving,\n            component: this\n        };\n\n        let component = this;\n\n        $.extend(dataTableConfig, this.globals.options);\n        dataTableConfig.language = this.globals.translations;\n\n        if (this.globals.serverSide == true) {\n            dataTableConfig.ajax = {\n                method: 'POST',\n                url: this.globals.source\n            };\n        }\n\n        if (!this.table) {\n            throw 'Unknown element for the datatable!';\n        }\n\n        // eslint-disable-next-line new-cap\n        this.globals.table = this.table.DataTable(dataTableConfig);\n\n        this.globals.state = this.globals.table.state.loaded();\n\n        this.setFilterValues();\n\n        if (typeof this.globals.autoReload !== 'undefined') {\n            this.bindReload(this.globals.autoReload);\n        }\n\n        if (typeof this.globals.perPage !== 'undefined') {\n            this.globals.options.perPage = this.globals.perPage;\n        }\n\n        if (typeof this.globals.options.perPage !== 'undefined') {\n            this.setPageLength();\n        }\n\n        this.globals.table.on('init.dt', function() {\n            component.triggerEvent('init.dt');\n        });\n\n        // once the table has been drawn, ensure a responsive reculcation\n        // if we do not do this, pagination might cause columns to go outside the table\n        $.each(this.events, this.listenToEvent.bind(this));\n\n        if (this.globals.serverSide != true) {\n            this.filterColumn();\n        }\n    }\n\n    /**\n     * Add a new event.\n     *\n     * @param {string} on\n     * @param {Function} fn\n     */\n    addEvent(on, fn) {\n        if (!this.events[on]) {\n            this.events[on] = [];\n        }\n\n        this.events[on].push(fn);\n    }\n\n    /**\n     * Listen to an event.\n     *\n     * @param {string} eventKey\n     */\n    listenToEvent(eventKey) {\n        let component = this;\n\n        this.globals.table.on(eventKey, function() {\n            component.triggerEvent(eventKey, arguments);\n        });\n    }\n\n    /**\n     * Trigger an event.\n     *\n     * @param {key}   on\n     * @param {array} eventArguments\n     */\n    triggerEvent(on, eventArguments) {\n        if (!this.events[on]) {\n            return;\n        }\n\n        $.each(this.events[on], function(index, fn) {\n            fn.apply(this, eventArguments);\n        });\n    }\n\n    /**\n     * Set the page length.\n     */\n    setPageLength() {\n        this.globals.table.page.len(this.globals.options.perPage).draw();\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getColumns() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let columns = [];\n\n        tableColumns.each(function() {\n            // set default options\n            let defOrderable = true;\n            let defSearchable = true;\n            let validOptionsSortOrder = [true, false];\n            // get the column values\n            let column = $(this);\n            let columnName = column.data('name');\n            let columnData = column.data('data');\n            let columnOrderable = column.data('orderable');\n            let columnSearchable = column.data('searchable');\n\n            if (typeof columnData === 'undefined') {\n                columnData = columnName;\n            }\n\n            if (typeof columnOrderable === 'undefined' || !validOptionsSortOrder.indexOf(columnOrderable)) {\n                columnOrderable = defOrderable;\n            }\n\n            if (typeof columnSearchable === 'undefined' || !validOptionsSortOrder.indexOf(columnSearchable)) {\n                columnSearchable = defSearchable;\n            }\n\n            columns.push({\n                data: columnData,\n                name: columnName,\n                orderable: columnOrderable,\n                searchable: columnSearchable\n            });\n        });\n\n        return columns;\n    }\n\n    /**\n     * Get the order.\n     *\n     * @return {array}\n     */\n    getOrder() {\n        let defaultOrder = [[0, 'desc']];\n        let validSortOrders = ['asc', 'desc'];\n        let sortColumn = this.table.find('[data-default-sort=\"true\"]');\n        let sortColumnOrder = sortColumn.data('default-sort-order');\n\n        if (sortColumn.length === 0) {\n            // no custom sort column on this table - use the default settings\n            return defaultOrder;\n        }\n\n        if (typeof sortColumnOrder === 'undefined') {\n            throw this.prefix.throw +\n                'You must add a sorting order (default-sort-order=\"asc/desc\")' +\n                ' if you are filtering on a custom column!';\n        }\n\n        if (validSortOrders.indexOf(sortColumnOrder) == -1) {\n            throw this.prefix.throw +\n                'You must add a valid sorting order (asc/desc) if you are filtering on a custom column!';\n        }\n\n        return [[sortColumn.index(), sortColumnOrder]];\n    }\n\n    /**\n     * Filter the columns.\n     */\n    filterColumn() {\n        let component = this;\n\n        if (!component.globals.table) {\n            return;\n        }\n\n        component.globals.table\n            .columns()\n            .eq(0)\n            .each(function(colIdx) {\n                let tableFilter = component.table.find(component.elements.filterRowSelector + ' th:eq(' + colIdx + ')');\n                let tableColumn = component.table.find(component.elements.columnRowSelector + ' th:eq(' + colIdx + ')');\n\n                component.initFilterSelect(colIdx, tableFilter);\n                component.initFilterInput(colIdx, tableFilter);\n            });\n    }\n\n    /**\n     * Initialize the input filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterInput(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            const searchValue = $(this).val();\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(searchValue)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterInputColumn).on('input', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterInputColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Initialize the select filter.\n     *\n     * @param {string} colIdx\n     * @param {object} tableFilter\n     */\n    initFilterSelect(colIdx, tableFilter) {\n        let component = this;\n\n        let debouncedFiltering = component.debounce(function(columnEvent, input) {\n            let searchValue = $(this).val();\n\n            if (input && !searchValue) {\n                return;\n            }\n\n            component.globals.table\n                .column(colIdx)\n                .search(component.searchString(searchValue), true, false)\n                .draw();\n        }, component.globals.debounceDelay);\n\n        tableFilter.find(component.elements.filterSelectColumn).on('change', debouncedFiltering);\n        tableFilter.find(component.elements.filterSelectColumn).each(debouncedFiltering);\n    }\n\n    /**\n     * Returns a delimited string from an array or the original search value.\n     *\n     * @param  {*} initialSearchValue\n     * @param  {string} [delimiter='|']\n     *\n     * @return {*}\n     */\n    searchString(initialSearchValue, delimiter = '|') {\n        let searchValue = initialSearchValue;\n\n        if (!searchValue || (Array.isArray(searchValue) && searchValue.length < 1)) {\n            return '';\n        }\n\n        if (Array.isArray(searchValue) && searchValue.length > 0) {\n            searchValue = searchValue.join(delimiter);\n        }\n\n        return '^' + searchValue + '$';\n    }\n\n    /**\n     * Bind the reload.\n     *\n     * @param {string} interval\n     */\n    bindReload(interval) {\n        setInterval(function() {\n            this.globals.table.ajax.reload();\n        }, interval);\n    }\n\n    /**\n     * Debounce a function.\n     *\n     * @param {object} func\n     * @param {number} wait\n     * @param {boolean} immediate\n     *\n     * @return {object}\n     */\n    debounce(func, wait, immediate) {\n        let timeout;\n\n        return function() {\n            let context = this;\n            let args = arguments;\n\n            clearTimeout(timeout);\n            timeout = setTimeout(function() {\n                timeout = null;\n                if (!immediate) {\n                    func.apply(context, args);\n                }\n            }, wait);\n            if (immediate && !timeout) {\n                func.apply(context, args);\n            }\n        };\n    }\n\n    /**\n     * Recalc the table.\n     */\n    recalc() {\n        if (!this.globals.table) {\n            return;\n        }\n\n        this.globals.table.responsive.recalc();\n    }\n\n    /**\n     * Set the filter values.\n     */\n    setFilterValues() {\n        let component = this;\n\n        if (!component.globals.state || !component.globals.state.columns) {\n            return;\n        }\n\n        $.each(component.globals.state.columns, function(column, value) {\n            let searchValue = value.search.search;\n\n            if (!searchValue) {\n                return;\n            }\n\n            // On a dropdown, regex is used for the search, to receive only values with the exact value.\n            // Check the function initFilterSelect, before and after the search value, a char is added.\n            // We have to remove the first and last char from the saved search value to select the dropdown value.\n            if (value.search.regex) {\n                searchValue = searchValue.slice(1, -1);\n            }\n\n            component.table\n                .find(component.elements.filterRowSelector + ' th')\n                .eq(column)\n                .find('.form-control')\n                .val(searchValue);\n        });\n    }\n\n    /**\n     * Get the columns.\n     *\n     * @return {array}\n     */\n    getFilters() {\n        let tableColumns = this.table.find(this.elements.columnRowSelector + ' th');\n        let filters = {};\n        let buttons = [];\n        let allButtons = [];\n        let component = this;\n\n        if (component.globals.options.buttons) {\n            buttons = this.globals.options.buttons;\n        }\n\n        tableColumns.each(function() {\n            let column = $(component);\n            let columnName = column.data('name');\n            let columnFilters = column.data('filter');\n\n            if (!columnFilters) {\n                allButtons.push(columnName + ':name');\n\n                return;\n            }\n\n            $.each(columnFilters.split('|'), function(index, columnFilter) {\n                if (!filters[columnFilter]) {\n                    filters[columnFilter] = [];\n                }\n\n                if (filters[columnFilter].indexOf(columnName + ':name') < 0) {\n                    filters[columnFilter].push(columnName + ':name');\n                }\n            });\n\n            allButtons.push(columnName + ':name');\n        });\n\n        $.each(filters, function(filterName, fields) {\n            let hideButtons = allButtons.filter(function(field) {\n                return fields.indexOf(field) < 0;\n            });\n\n            buttons.push({\n                extend: 'colvisGroup',\n                text: filterName,\n                show: fields,\n                hide: hideButtons\n            });\n        });\n\n        if (!jQuery.isEmptyObject(filters) && buttons.length > 0) {\n            buttons.push({\n                extend: 'colvisGroup',\n                text: component.globals.translations.all,\n                show: allButtons,\n                hide: []\n            });\n        }\n\n        if (component.globals.columnFilter == true) {\n            buttons.push({\n                extend: 'colvis',\n                text: '<i class=\"fa fa-columns\"></i> ' + component.globals.translations.columns\n            });\n        }\n\n        return buttons;\n    }\n\n    /**\n     * Get the datatable object.\n     *\n     * @return {object}\n     */\n    getTable() {\n        return this.globals.table;\n    }\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = DataTable;\n}\n"],"names":["module","exports","$table","userOptions","eventOptions","translations","this","version","table","elements","columnRowSelector","filterRowSelector","filterSelectColumn","filterInputColumn","prefix","throw","defaultOptions","language","stateSaving","dom","buttons","showAlertForXhrInactivity","handleXhrInactivity","showAlertForErrors","handleErrors","globals","options","source","data","columnFilter","autoReload","perPage","tableID","attr","serverSide","state","debounceDelay","events","draw.dt","recalc","bind","init.dt","initComplete","xhr.dt","onXhr","error.dt","onError","$","fn","dataTable","ext","errMode","e","settings","json","xhr","status","responseJSON","error","oInit","alert","techNote","message","init","getOptions","getTranslations","getFilters","hasRequirementsOrThrow","getEventOptions","makeTable","extend","get","each","eventKey","eventOption","columnRow","find","length","dataTableConfig","autoWidth","columns","getColumns","component","filterColumn","triggerEvent","order","getOrder","orderCellsTop","processing","responsive","stateSave","ajax","method","url","DataTable","loaded","setFilterValues","bindReload","setPageLength","on","listenToEvent","addEvent","push","arguments","eventArguments","index","apply","page","len","draw","tableColumns","validOptionsSortOrder","column","columnName","columnData","columnOrderable","columnSearchable","indexOf","name","orderable","searchable","sortColumn","sortColumnOrder","eq","colIdx","tableFilter","initFilterSelect","initFilterInput","debouncedFiltering","debounce","columnEvent","input","searchValue","val","search","searchString","initialSearchValue","delimiter","Array","isArray","join","interval","setInterval","reload","func","wait","immediate","timeout","context","args","clearTimeout","setTimeout","value","regex","slice","filters","allButtons","columnFilters","split","filterName","fields","hideButtons","filter","field","text","show","hide","jQuery","isEmptyObject","all","getTable"],"mappings":"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"}